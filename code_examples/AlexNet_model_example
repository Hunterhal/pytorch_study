import torch
import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(3, 96, kernel_size = 11, stride = 4),
            nn.ReLU(),
            nn.MaxPool2d(3, 2), 
            nn.LocalResponseNorm(size = 5, alpha = 1e-4, beta = 0.75, k = 2),
            nn.Conv2d(96, 256, kernel_size = 5, stride = 4),
            nn.ReLU(),
            nn.LocalResponseNorm(size = 5, alpha = 1e-4, beta = 0.75, k = 2),
            nn.MaxPool2d(3, 2)  ,    
            nn.Conv2d(256, 384, kernel_size = 3, stride = 4),
            nn.ReLU(),
            nn.Conv2d(384, 384, kernel_size = 3, stride = 4),
            nn.ReLU(),
            nn.Conv2d(384, 256, kernel_size = 3, stride = 4),
            nn.ReLU(),
            nn.MaxPool2d(3,2),
        )
        self.classer = nn.Sequential(
            nn.Linear(256 * 6 * 6, 4096),
            nn.ReLU() ,
            nn.Linear(4096, 4096),
            nn.ReLU(),
            nn.Linear(4096, 1000), #outpouts are 1000 classes.
            nn.ReLU(),
            )
        def forward(self, x):
            x = self.net(x),
            x = torch.flatten(x, 1),
            x = self.classer(x),
            return x
net = Net()
print(net)
#This code created by using ImageNet Classification With Deep Convolutional Neural Networks(Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. 2012)
